# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

import msrest.serialization


class AddChatThreadMembersRequest(msrest.serialization.Model):
    """Thread members to be added to the thread.

    All required parameters must be populated in order to send to Azure.

    :param members: Required. Members to add to a chat thread.
    :type members: list[~azure.communication.chat.models.ChatThreadMember]
    """

    _validation = {
        'members': {'required': True},
    }

    _attribute_map = {
        'members': {'key': 'members', 'type': '[ChatThreadMember]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(AddChatThreadMembersRequest, self).__init__(**kwargs)
        self.members = kwargs['members']


class ChatMessage(msrest.serialization.Model):
    """ChatMessage.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: The id of the chat message. This id is server generated.
    :vartype id: str
    :param type: Type of the chat message.
    
     Possible values:
    
     .. code-block::
    
        - Text
        - ThreadActivity/TopicUpdate
        - ThreadActivity/AddMember
        - ThreadActivity/DeleteMember.
    :type type: str
    :param priority: The chat message priority. Possible values include: "Normal", "High".
    :type priority: str or ~azure.communication.chat.models.ChatMessagePriorityDto
    :ivar version: Version of the chat message.
    :vartype version: str
    :param content: Content of the chat message.
    :type content: str
    :param sender_display_name: The display name of the chat message sender. This property is used
     to populate sender name for push notifications.
    :type sender_display_name: str
    :ivar original_arrival_time: The timestamp when the chat message arrived at the server. The
     timestamp is in ISO8601 format: ``yyyy-MM-ddTHH:mm:ssZ``.
    :vartype original_arrival_time: ~datetime.datetime
    :ivar from_property: The Id of the chat message sender.
    :vartype from_property: str
    :param delete_time: The timestamp when the chat message was deleted in Unix time (epoch time)
     in milliseconds.
    :type delete_time: long
    :param edit_time: The timestamp when the chat message was edited in Unix time (epoch time) in
     milliseconds.
    :type edit_time: long
    """

    _validation = {
        'id': {'readonly': True},
        'version': {'readonly': True},
        'original_arrival_time': {'readonly': True},
        'from_property': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'priority': {'key': 'priority', 'type': 'str'},
        'version': {'key': 'version', 'type': 'str'},
        'content': {'key': 'content', 'type': 'str'},
        'sender_display_name': {'key': 'senderDisplayName', 'type': 'str'},
        'original_arrival_time': {'key': 'originalArrivalTime', 'type': 'iso-8601'},
        'from_property': {'key': 'from', 'type': 'str'},
        'delete_time': {'key': 'deleteTime', 'type': 'long'},
        'edit_time': {'key': 'editTime', 'type': 'long'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ChatMessage, self).__init__(**kwargs)
        self.id = None
        self.type = kwargs.get('type', None)
        self.priority = kwargs.get('priority', None)
        self.version = None
        self.content = kwargs.get('content', None)
        self.sender_display_name = kwargs.get('sender_display_name', None)
        self.original_arrival_time = None
        self.from_property = None
        self.delete_time = kwargs.get('delete_time', None)
        self.edit_time = kwargs.get('edit_time', None)


class ChatThread(msrest.serialization.Model):
    """ChatThread.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Chat thread id.
    :vartype id: str
    :param topic: Chat thread topic.
    :type topic: str
    :ivar created_at: Chat thread creation time in Unix time (epoch time) in milliseconds.
    :vartype created_at: str
    :ivar created_by: Id of the chat thread owner.
    :vartype created_by: str
    :param members: Chat thread members.
    :type members: list[~azure.communication.chat.models.ChatThreadMember]
    """

    _validation = {
        'id': {'readonly': True},
        'created_at': {'readonly': True},
        'created_by': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'topic': {'key': 'topic', 'type': 'str'},
        'created_at': {'key': 'createdAt', 'type': 'str'},
        'created_by': {'key': 'createdBy', 'type': 'str'},
        'members': {'key': 'members', 'type': '[ChatThreadMember]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ChatThread, self).__init__(**kwargs)
        self.id = None
        self.topic = kwargs.get('topic', None)
        self.created_at = None
        self.created_by = None
        self.members = kwargs.get('members', None)


class ChatThreadInfo(msrest.serialization.Model):
    """ChatThreadInfo.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Chat thread id.
    :vartype id: str
    :param topic: Chat thread topic.
    :type topic: str
    :param is_deleted: Flag if a chat thread is soft deleted.
    :type is_deleted: bool
    :ivar last_message_received_time: The timestamp when the last message arrived at the server.
     The timestamp is in ISO8601 format: ``yyyy-MM-ddTHH:mm:ssZ``.
    :vartype last_message_received_time: ~datetime.datetime
    """

    _validation = {
        'id': {'readonly': True},
        'last_message_received_time': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'topic': {'key': 'topic', 'type': 'str'},
        'is_deleted': {'key': 'isDeleted', 'type': 'bool'},
        'last_message_received_time': {'key': 'lastMessageReceivedTime', 'type': 'iso-8601'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ChatThreadInfo, self).__init__(**kwargs)
        self.id = None
        self.topic = kwargs.get('topic', None)
        self.is_deleted = kwargs.get('is_deleted', None)
        self.last_message_received_time = None


class ChatThreadMember(msrest.serialization.Model):
    """A member of the chat thread.

    All required parameters must be populated in order to send to Azure.

    :param id: Required. The id of the chat thread member in the format
     ``8:acs:ResourceId_AcsUserId``.
    :type id: str
    :param display_name: Display name for the chat thread member.
    :type display_name: str
    :param share_history_time: Time from which the chat history is shared with the member in EPOCH
     time (milliseconds).
    
     Possible values:
    
    
     * ``0`` which means share everything
     * ``-1`` which means share nothing
     * ``1594691284031`` which is epoch time equivalent to 7/14/2020 1:48:04 AM +00:00.
    :type share_history_time: str
    """

    _validation = {
        'id': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'share_history_time': {'key': 'shareHistoryTime', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ChatThreadMember, self).__init__(**kwargs)
        self.id = kwargs['id']
        self.display_name = kwargs.get('display_name', None)
        self.share_history_time = kwargs.get('share_history_time', None)


class CreateChatThreadRequest(msrest.serialization.Model):
    """Request payload for creating a chat thread.

    All required parameters must be populated in order to send to Azure.

    :param topic: Required. The chat thread topic.
    :type topic: str
    :param members: Required. Members to be added to the chat thread.
    :type members: list[~azure.communication.chat.models.ChatThreadMember]
    """

    _validation = {
        'topic': {'required': True},
        'members': {'required': True},
    }

    _attribute_map = {
        'topic': {'key': 'topic', 'type': 'str'},
        'members': {'key': 'members', 'type': '[ChatThreadMember]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CreateChatThreadRequest, self).__init__(**kwargs)
        self.topic = kwargs['topic']
        self.members = kwargs['members']


class CreateChatThreadResult(msrest.serialization.Model):
    """Result for the create chat thread operation.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Chat thread Id.
    :vartype id: str
    """

    _validation = {
        'id': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CreateChatThreadResult, self).__init__(**kwargs)
        self.id = None


class ListChatMessagesResult(msrest.serialization.Model):
    """List of chat messages for a particular chat thread.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar messages: List of chat messages.
    :vartype messages: list[~azure.communication.chat.models.ChatMessage]
    :ivar sync_state: Continuation link to get new and modified chat messages.
    :vartype sync_state: str
    :ivar backward_link: If there are more chat messages that can be retrieved, the backward link
     will be populated.
    :vartype backward_link: str
    """

    _validation = {
        'messages': {'readonly': True},
        'sync_state': {'readonly': True},
        'backward_link': {'readonly': True},
    }

    _attribute_map = {
        'messages': {'key': 'messages', 'type': '[ChatMessage]'},
        'sync_state': {'key': 'syncState', 'type': 'str'},
        'backward_link': {'key': 'backwardLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ListChatMessagesResult, self).__init__(**kwargs)
        self.messages = None
        self.sync_state = None
        self.backward_link = None


class ListChatThreadsResult(msrest.serialization.Model):
    """ListChatThreadsResult.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar threads: List of chat threads.
    :vartype threads: list[~azure.communication.chat.models.ChatThreadInfo]
    :ivar sync_state: Continuation link to get new and modified chat threads.
    :vartype sync_state: str
    :ivar backward_link: If there are more chat threads that can be retrieved, the backward link
     will be populated.
    :vartype backward_link: str
    """

    _validation = {
        'threads': {'readonly': True},
        'sync_state': {'readonly': True},
        'backward_link': {'readonly': True},
    }

    _attribute_map = {
        'threads': {'key': 'threads', 'type': '[ChatThreadInfo]'},
        'sync_state': {'key': 'syncState', 'type': 'str'},
        'backward_link': {'key': 'backwardLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ListChatThreadsResult, self).__init__(**kwargs)
        self.threads = None
        self.sync_state = None
        self.backward_link = None


class PostReadReceiptRequest(msrest.serialization.Model):
    """Request payload for sending a read receipt.

    All required parameters must be populated in order to send to Azure.

    :param chat_message_id: Required. Id of the latest chat message read by the user.
    :type chat_message_id: str
    """

    _validation = {
        'chat_message_id': {'required': True},
    }

    _attribute_map = {
        'chat_message_id': {'key': 'chatMessageId', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(PostReadReceiptRequest, self).__init__(**kwargs)
        self.chat_message_id = kwargs['chat_message_id']


class ReadReceipt(msrest.serialization.Model):
    """A read receipt indicates the time a chat message was read by a recipient.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar user_id: Read receipt sender id.
    :vartype user_id: str
    :ivar chat_message_id: Id for the chat message that has been read. This id is server generated.
    :vartype chat_message_id: str
    :ivar read_timestamp: Read receipt timestamp.
    :vartype read_timestamp: long
    """

    _validation = {
        'user_id': {'readonly': True},
        'chat_message_id': {'readonly': True},
        'read_timestamp': {'readonly': True},
    }

    _attribute_map = {
        'user_id': {'key': 'userId', 'type': 'str'},
        'chat_message_id': {'key': 'chatMessageId', 'type': 'str'},
        'read_timestamp': {'key': 'readTimestamp', 'type': 'long'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ReadReceipt, self).__init__(**kwargs)
        self.user_id = None
        self.chat_message_id = None
        self.read_timestamp = None


class SendChatMessageRequest(msrest.serialization.Model):
    """Details of the message to send.

    All required parameters must be populated in order to send to Azure.

    :param priority: The chat message priority. Possible values include: "Normal", "High".
    :type priority: str or ~azure.communication.chat.models.ChatMessagePriorityDto
    :param content: Required. Chat message content.
    :type content: str
    :param sender_display_name: The display name of the chat message sender. This property is used
     to populate sender name for push notifications.
    :type sender_display_name: str
    """

    _validation = {
        'content': {'required': True},
    }

    _attribute_map = {
        'priority': {'key': 'priority', 'type': 'str'},
        'content': {'key': 'content', 'type': 'str'},
        'sender_display_name': {'key': 'senderDisplayName', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(SendChatMessageRequest, self).__init__(**kwargs)
        self.priority = kwargs.get('priority', None)
        self.content = kwargs['content']
        self.sender_display_name = kwargs.get('sender_display_name', None)


class SendMessageResult(msrest.serialization.Model):
    """Result of the send message operation.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: The Id of the message. This Id is server generated.
    :vartype id: str
    """

    _validation = {
        'id': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(SendMessageResult, self).__init__(**kwargs)
        self.id = None


class UpdateChatMessageRequest(msrest.serialization.Model):
    """UpdateChatMessageRequest.

    :param content: Chat message content.
    :type content: str
    """

    _attribute_map = {
        'content': {'key': 'content', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(UpdateChatMessageRequest, self).__init__(**kwargs)
        self.content = kwargs.get('content', None)


class UpdateChatThreadRequest(msrest.serialization.Model):
    """UpdateChatThreadRequest.

    :param topic: Chat thread topic.
    :type topic: str
    """

    _attribute_map = {
        'topic': {'key': 'topic', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(UpdateChatThreadRequest, self).__init__(**kwargs)
        self.topic = kwargs.get('topic', None)
