# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

import uuid
from azure.core.exceptions import HttpResponseError, map_error

from .. import models


class UserTokenOperations(object):
    """UserTokenOperations operations.

    You should not instantiate directly this class, but create a Client instance that will create it for you and attach it as attribute.

    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    :ivar api_version: The API version to use for the request. Constant value: "2020-06-04-preview".
    """

    models = models

    def __init__(self, client, config, serializer, deserializer):

        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self.api_version = "2020-06-04-preview"

        self._config = config

    def issue(self, identity, cls=None, **kwargs):
        """Generates a user token for a user identity.

        :param identity:
        :type identity: str
        :param callable cls: A custom type or function that will be passed the
         direct response
        :return: TokenResponse or the result of cls(response)
        :rtype: ~azure.communication.configuration.models.TokenResponse
        :raises:
         :class:`HttpResponseError<azure.core.exceptions.HttpResponseError>`
        """
        error_map = kwargs.pop('error_map', None)
        body = models.TokenRequest(identity=identity)

        # Construct URL
        url = self.issue.metadata['url']

        # Construct parameters
        query_parameters = {}
        query_parameters['api-version'] = self._serialize.query("self.api_version", self.api_version, 'str')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        header_parameters['Content-Type'] = 'application/json-patch+json; charset=utf-8'
        if self._config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())

        # Construct body
        body_content = self._serialize.body(body, 'TokenRequest')

        # Construct and send request
        request = self._client.post(url, query_parameters, header_parameters, body_content)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = None
        if response.status_code == 200:
            deserialized = self._deserialize('TokenResponse', response)

        if cls:
            return cls(response, deserialized, None)

        return deserialized
    issue.metadata = {'url': '/identity/token'}
