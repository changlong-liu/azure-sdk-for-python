# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

import msrest.serialization


class AcsUser(msrest.serialization.Model):
    """AcsUser.

    All required parameters must be populated in order to send to Azure.

    :param identity: Required.
    :type identity: str
    """

    _validation = {
        'identity': {'required': True},
    }

    _attribute_map = {
        'identity': {'key': 'identity', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(AcsUser, self).__init__(**kwargs)
        self.identity = kwargs['identity']


class BatchIdentityResponse(msrest.serialization.Model):
    """BatchIdentityResponse.

    :param identities:
    :type identities: list[str]
    """

    _attribute_map = {
        'identities': {'key': 'identities', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(BatchIdentityResponse, self).__init__(**kwargs)
        self.identities = kwargs.get('identities', None)


class BatchToken(msrest.serialization.Model):
    """BatchToken.

    :param acs_token:
    :type acs_token: ~azure.communication.configuration.models.TokenResponse
    :param status_message:
    :type status_message: str
    """

    _attribute_map = {
        'acs_token': {'key': 'acsToken', 'type': 'TokenResponse'},
        'status_message': {'key': 'statusMessage', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(BatchToken, self).__init__(**kwargs)
        self.acs_token = kwargs.get('acs_token', None)
        self.status_message = kwargs.get('status_message', None)


class BatchTokenRequest(msrest.serialization.Model):
    """BatchTokenRequest.

    All required parameters must be populated in order to send to Azure.

    :param identity:
    :type identity: str
    :param scopes: Required.
    :type scopes: list[str]
    """

    _validation = {
        'scopes': {'required': True},
    }

    _attribute_map = {
        'identity': {'key': 'identity', 'type': 'str'},
        'scopes': {'key': 'scopes', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(BatchTokenRequest, self).__init__(**kwargs)
        self.identity = kwargs.get('identity', None)
        self.scopes = kwargs['scopes']


class BatchTokenResponse(msrest.serialization.Model):
    """BatchTokenResponse.

    :param tokens:
    :type tokens: list[~azure.communication.configuration.models.BatchToken]
    """

    _attribute_map = {
        'tokens': {'key': 'tokens', 'type': '[BatchToken]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(BatchTokenResponse, self).__init__(**kwargs)
        self.tokens = kwargs.get('tokens', None)


class ResourceRequest(msrest.serialization.Model):
    """ResourceRequest.

    All required parameters must be populated in order to send to Azure.

    :param resource_id: Required.
    :type resource_id: str
    """

    _validation = {
        'resource_id': {'required': True},
    }

    _attribute_map = {
        'resource_id': {'key': 'resourceId', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ResourceRequest, self).__init__(**kwargs)
        self.resource_id = kwargs['resource_id']


class ResourceRevocationEventRequest(msrest.serialization.Model):
    """ResourceRevocationEventRequest.

    All required parameters must be populated in order to send to Azure.

    :param timestamp: Required.
    :type timestamp: long
    :param resource_id: Required.
    :type resource_id: str
    """

    _validation = {
        'timestamp': {'required': True, 'minimum': 1},
        'resource_id': {'required': True},
    }

    _attribute_map = {
        'timestamp': {'key': 'timestamp', 'type': 'long'},
        'resource_id': {'key': 'resourceId', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ResourceRevocationEventRequest, self).__init__(**kwargs)
        self.timestamp = kwargs['timestamp']
        self.resource_id = kwargs['resource_id']


class TokenRequest(msrest.serialization.Model):
    """TokenRequest.

    All required parameters must be populated in order to send to Azure.

    :param identity:
    :type identity: str
    :param scopes: Required.
    :type scopes: list[str]
    """

    _validation = {
        'scopes': {'required': True},
    }

    _attribute_map = {
        'identity': {'key': 'identity', 'type': 'str'},
        'scopes': {'key': 'scopes', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(TokenRequest, self).__init__(**kwargs)
        self.identity = kwargs.get('identity', None)
        self.scopes = kwargs['scopes']


class TokenResponse(msrest.serialization.Model):
    """TokenResponse.

    :param identity:
    :type identity: str
    :param token:
    :type token: str
    :param expires_in:
    :type expires_in: int
    """

    _attribute_map = {
        'identity': {'key': 'identity', 'type': 'str'},
        'token': {'key': 'token', 'type': 'str'},
        'expires_in': {'key': 'expiresIn', 'type': 'int'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(TokenResponse, self).__init__(**kwargs)
        self.identity = kwargs.get('identity', None)
        self.token = kwargs.get('token', None)
        self.expires_in = kwargs.get('expires_in', None)


class UserRevocationEventRequest(msrest.serialization.Model):
    """UserRevocationEventRequest.

    All required parameters must be populated in order to send to Azure.

    :param timestamp: Required.
    :type timestamp: long
    :param identity: Required.
    :type identity: str
    """

    _validation = {
        'timestamp': {'required': True, 'minimum': 1},
        'identity': {'required': True},
    }

    _attribute_map = {
        'timestamp': {'key': 'timestamp', 'type': 'long'},
        'identity': {'key': 'identity', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(UserRevocationEventRequest, self).__init__(**kwargs)
        self.timestamp = kwargs['timestamp']
        self.identity = kwargs['identity']
